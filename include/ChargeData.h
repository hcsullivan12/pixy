//
// Created by damian on 6/3/17.
//

#ifndef PIXY_ROIMUX_CHARGEDATA_H
#define PIXY_ROIMUX_CHARGEDATA_H

#include <iostream>
#include <string>
#include <utility>
#include <vector>
#include "TFile.h"
#include "TH2S.h"
#include "RunParams.h"


namespace pixy_roimux {
///
/// This class converts the two DAQ histograms of each event to a pixel and an ROI histogram.
/// The constructor can either read from a single pair of DAQ histograms passed by const pointers, read from a vector of
/// pairs of const pointers to DAQ histograms, read an entire ROOT file of DAQ histograms, or read a specific subset of
/// DAQ histograms from a ROOT file using a vector of event numbers. The resulting histograms are stored as pairs in a
/// vector again. They can be accessed individually or using the vector both by reference and const reference. This
/// allows to pass an instance of this class containing all the relevant data by reference and const reference,
/// respectively. Futhermore, the histograms are cut after the number of samples passed on to the respective constructor
/// in order to reduce the amount of unused data.
///
    class ChargeData {
    public:

        ///
        /// Constructor reading all events from a ROOT file.
        /// Needs the map to assign the DAQ channels to the corresponding readout channels. The histograms are cut after
        /// nSamples samples. The subrun ID is stored with the data for later use. Event IDs are generated by counting up
        /// from 0.
        ///
        ChargeData(
                const std::string t_rootFileName,
                const unsigned t_subrunId,
                const pixy_roimux::RunParams &t_runParams);

        ///
        /// Constructor reading a subset of events from a ROOT file.
        /// Reads all the events contained in eventIds. Needs the map to assign the DAQ channels to the corresponding
        /// readout channels. The histograms are cut after nSamples samples. The subrun ID and the event IDs are stored with
        /// the data for later use.
        ///
        ChargeData(
                const std::string t_rootFileName,
                const std::vector<unsigned> &t_eventIds,
                const unsigned t_subrunId,
                const pixy_roimux::RunParams &t_map);

        ///
        /// Constructor reading a vector pairs of DAQ histograms.
        /// Needs the map to assign the DAQ channels to the corresponding readout channels. The histograms are cut after
        /// nSamples samples. The subrun ID and the event IDs are stored with the data for later use.
        ///
        ChargeData(
                const std::vector<std::pair<const TH2S *, const TH2S *>> &t_daqHistos,
                const std::vector<unsigned> &t_eventIds,
                const unsigned t_subrunId,
                const pixy_roimux::RunParams &t_map);

        ///
        /// Constructor directly reading a pair of DAQ histograms.
        /// Needs the map to assign the DAQ channels to the corresponding readout channels. The histograms are cut after
        /// nSamples samples. The subrun ID and the event ID are store with the data for later use.
        ///
        ChargeData(
                const TH2S *const t_indHisto,
                const TH2S *const t_colHisto,
                const unsigned t_eventId,
                const unsigned t_subrunId,
                const pixy_roimux::RunParams &t_map);

        ///
        /// Get the vector containing the readout histograms.
        ///
        std::vector<std::pair<TH2S, TH2S>> &getReadoutHistos() {
            return m_readoutHistos;
        }

        ///
        /// Get the vector containing the readout histograms as const reference.
        ///
        const std::vector<std::pair<TH2S, TH2S>> &getReadoutHistos() const {
            return m_readoutHistos;
        }

        ///
        /// Get the pixel histogram of a particular event.
        ///
        TH2S &getPixelHisto(const unsigned t_eventIdx) {
            return m_readoutHistos.at(t_eventIdx).first;
        }

        ///
        /// Get the pixel histogram of a particular event as const reference.
        ///
        const TH2S &getPixelHisto(const unsigned t_eventIdx) const {
            return m_readoutHistos.at(t_eventIdx).first;
        }

        ///
        /// Get the ROI histogram of a particular event.
        ///
        TH2S &getRoiHisto(const unsigned t_eventIdx) {
            return m_readoutHistos.at(t_eventIdx).second;
        }

        ///
        /// Get the ROI histogram of a particular event as const reference.
        ///
        const TH2S &getRoiHisto(const unsigned t_eventIdx) const {
            return m_readoutHistos.at(t_eventIdx).second;
        }

        ///
        /// Get vector of event IDs.
        ///
        const std::vector<unsigned> &getEventIds() const {
            return m_eventIds;
        }

        ///
        /// Get subrun ID.
        ///
        unsigned getSubrunId() const {
            return m_subrunId;
        }


    private:

        ///
        /// Private method used internally to convert the histograms read by the constructor.
        ///
        void convertHistos();

        ///
        /// Subrun ID.
        ///
        const unsigned m_subrunId;

        ///
        /// Event IDs;
        ///
        std::vector<unsigned> m_eventIds;

        ///
        /// Map for the conversion from DAQ channels to readout channels.
        ///
        const pixy_roimux::RunParams &m_runParams;

        ///
        /// Vector of DAQ histogram const pointers.
        ///
        std::vector<std::pair<const TH2S *, const TH2S *>> m_daqHistos;

        ///
        /// Vector of readout histograms.
        ///
        std::vector<std::pair<TH2S, TH2S>> m_readoutHistos;
    };
}


#endif //PIXY_ROIMUX_CHARGEDATA_H
